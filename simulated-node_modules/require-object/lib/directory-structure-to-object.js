'use strict';

const path = require('path');
const fs = require('fs');

module.exports = startPath => {

	// Final directory structure object to be returned
	let dirObject = {};

	// Recursive funtion that populates dirObject
	const recurse = (dirPath, parent) => {

		// Iterates over all items in dirPath
		fs.readdirSync(dirPath).forEach((itemName, i, itemList) => {

			// Skip cirtain items
			if (['node_modules', '.git'].includes(itemName)) return;

			// Path to the item including the item itself
			const itemPath = path.join(dirPath, itemName);

			// Item information
			const stat = fs.statSync(itemPath);

			if (stat.isFile()) {

				// If file, add getter to parent
				Object.defineProperty(parent, itemName, {

					/* If file extention is 'js' or 'json'
					require() the file, else read the file as a
					buffer. */
					get: () => /\.js(on)?$/.test(itemName) ? require(itemPath) : fs.readFileSync(itemPath),

					enumerable: true

				});

			} else if (stat.isDirectory()) {

				/* if directory, add object to parent and do it
				all again from inside that object. */
				parent[itemName] = {};
				recurse(itemPath, parent[itemName]);

			}

		});

	}

	/* Start the recursion at startPath and the top level of
	dirObject that is currently empty. */
	recurse(startPath, dirObject);

	// Return populated object
	return dirObject;

}
